### YamlMime:ManagedReference
items:
- uid: RestModels.Options.FormattingOptions
  commentId: T:RestModels.Options.FormattingOptions
  id: FormattingOptions
  parent: RestModels.Options
  children:
  - RestModels.Options.FormattingOptions.Copy
  - RestModels.Options.FormattingOptions.IncludedReturnProperties
  - RestModels.Options.FormattingOptions.StripArrayIfSingleElement
  langs:
  - csharp
  - vb
  name: FormattingOptions
  nameWithType: FormattingOptions
  fullName: RestModels.Options.FormattingOptions
  type: Class
  source:
    remote:
      path: RestModels/Options/FormattingOptions.cs
      branch: master
      repo: git@github.com:jlynch630/RestModels.git
    id: FormattingOptions
    path: ../../RestModels/Options/FormattingOptions.cs
    startLine: 16
  assemblies:
  - RestModels
  namespace: RestModels.Options
  summary: "\nOptions to be used with an <xref href=\"RestModels.Results.IResultWriter%602\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public class FormattingOptions
    content.vb: Public Class FormattingOptions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: RestModels.Options.FormattingOptions.StripArrayIfSingleElement
  commentId: P:RestModels.Options.FormattingOptions.StripArrayIfSingleElement
  id: StripArrayIfSingleElement
  parent: RestModels.Options.FormattingOptions
  langs:
  - csharp
  - vb
  name: StripArrayIfSingleElement
  nameWithType: FormattingOptions.StripArrayIfSingleElement
  fullName: RestModels.Options.FormattingOptions.StripArrayIfSingleElement
  type: Property
  source:
    remote:
      path: RestModels/Options/FormattingOptions.cs
      branch: master
      repo: git@github.com:jlynch630/RestModels.git
    id: StripArrayIfSingleElement
    path: ../../RestModels/Options/FormattingOptions.cs
    startLine: 24
  assemblies:
  - RestModels
  namespace: RestModels.Options
  summary: "\nGets or sets a value indicating whether the data should be returned formatted as a single element if the dataset\nonly has one element in it.\n"
  remarks: "\nFor example, in JSON, this would be the difference between returning [{ ... }] and { ... }\n"
  example: []
  syntax:
    content: public bool StripArrayIfSingleElement { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property StripArrayIfSingleElement As Boolean
  overload: RestModels.Options.FormattingOptions.StripArrayIfSingleElement*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: RestModels.Options.FormattingOptions.IncludedReturnProperties
  commentId: P:RestModels.Options.FormattingOptions.IncludedReturnProperties
  id: IncludedReturnProperties
  parent: RestModels.Options.FormattingOptions
  langs:
  - csharp
  - vb
  name: IncludedReturnProperties
  nameWithType: FormattingOptions.IncludedReturnProperties
  fullName: RestModels.Options.FormattingOptions.IncludedReturnProperties
  type: Property
  source:
    remote:
      path: RestModels/Options/FormattingOptions.cs
      branch: master
      repo: git@github.com:jlynch630/RestModels.git
    id: IncludedReturnProperties
    path: ../../RestModels/Options/FormattingOptions.cs
    startLine: 29
  assemblies:
  - RestModels
  namespace: RestModels.Options
  summary: "\nGets or sets a list of properties that should be included in the result\n"
  example: []
  syntax:
    content: public List<PropertyInfo> IncludedReturnProperties { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Reflection.PropertyInfo}
    content.vb: Public Property IncludedReturnProperties As List(Of PropertyInfo)
  overload: RestModels.Options.FormattingOptions.IncludedReturnProperties*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: RestModels.Options.FormattingOptions.Copy
  commentId: M:RestModels.Options.FormattingOptions.Copy
  id: Copy
  parent: RestModels.Options.FormattingOptions
  langs:
  - csharp
  - vb
  name: Copy()
  nameWithType: FormattingOptions.Copy()
  fullName: RestModels.Options.FormattingOptions.Copy()
  type: Method
  source:
    remote:
      path: RestModels/Options/FormattingOptions.cs
      branch: master
      repo: git@github.com:jlynch630/RestModels.git
    id: Copy
    path: ../../RestModels/Options/FormattingOptions.cs
    startLine: 35
  assemblies:
  - RestModels
  namespace: RestModels.Options
  summary: "\nMakes a copy of these <xref href=\"RestModels.Options.FormattingOptions\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public FormattingOptions Copy()
    return:
      type: RestModels.Options.FormattingOptions
      description: A copy of these <xref href="RestModels.Options.FormattingOptions" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function Copy As FormattingOptions
  overload: RestModels.Options.FormattingOptions.Copy*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: RestModels.Results.IResultWriter`2
  commentId: T:RestModels.Results.IResultWriter`2
  name: IResultWriter<TModel, TUser>
  nameWithType: IResultWriter<TModel, TUser>
  fullName: RestModels.Results.IResultWriter<TModel, TUser>
  nameWithType.vb: IResultWriter(Of TModel, TUser)
  fullName.vb: RestModels.Results.IResultWriter(Of TModel, TUser)
  name.vb: IResultWriter(Of TModel, TUser)
  spec.csharp:
  - uid: RestModels.Results.IResultWriter`2
    name: IResultWriter
    nameWithType: IResultWriter
    fullName: RestModels.Results.IResultWriter
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: RestModels.Results.IResultWriter`2
    name: IResultWriter
    nameWithType: IResultWriter
    fullName: RestModels.Results.IResultWriter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: RestModels.Options
  commentId: N:RestModels.Options
  name: RestModels.Options
  nameWithType: RestModels.Options
  fullName: RestModels.Options
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: RestModels.Options.FormattingOptions.StripArrayIfSingleElement*
  commentId: Overload:RestModels.Options.FormattingOptions.StripArrayIfSingleElement
  name: StripArrayIfSingleElement
  nameWithType: FormattingOptions.StripArrayIfSingleElement
  fullName: RestModels.Options.FormattingOptions.StripArrayIfSingleElement
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: RestModels.Options.FormattingOptions.IncludedReturnProperties*
  commentId: Overload:RestModels.Options.FormattingOptions.IncludedReturnProperties
  name: IncludedReturnProperties
  nameWithType: FormattingOptions.IncludedReturnProperties
  fullName: RestModels.Options.FormattingOptions.IncludedReturnProperties
- uid: System.Collections.Generic.List{System.Reflection.PropertyInfo}
  commentId: T:System.Collections.Generic.List{System.Reflection.PropertyInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<PropertyInfo>
  nameWithType: List<PropertyInfo>
  fullName: System.Collections.Generic.List<System.Reflection.PropertyInfo>
  nameWithType.vb: List(Of PropertyInfo)
  fullName.vb: System.Collections.Generic.List(Of System.Reflection.PropertyInfo)
  name.vb: List(Of PropertyInfo)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: RestModels.Options.FormattingOptions
  commentId: T:RestModels.Options.FormattingOptions
  parent: RestModels.Options
  name: FormattingOptions
  nameWithType: FormattingOptions
  fullName: RestModels.Options.FormattingOptions
- uid: RestModels.Options.FormattingOptions.Copy*
  commentId: Overload:RestModels.Options.FormattingOptions.Copy
  name: Copy
  nameWithType: FormattingOptions.Copy
  fullName: RestModels.Options.FormattingOptions.Copy
