### YamlMime:ManagedReference
items:
- uid: RestModels.Filters.DelegateFilter`2
  commentId: T:RestModels.Filters.DelegateFilter`2
  id: DelegateFilter`2
  parent: RestModels.Filters
  children:
  - RestModels.Filters.DelegateFilter`2.#ctor(System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1,System.Threading.Tasks.Task{System.Linq.IQueryable{`0}}})
  - RestModels.Filters.DelegateFilter`2.FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1)
  langs:
  - csharp
  - vb
  name: DelegateFilter<TModel, TUser>
  nameWithType: DelegateFilter<TModel, TUser>
  fullName: RestModels.Filters.DelegateFilter<TModel, TUser>
  type: Class
  source:
    remote:
      path: RestModels/Filters/DelegateFilter.cs
      branch: master
      repo: git@github.com:jlynch630/RestModels.git
    id: DelegateFilter
    path: ../../RestModels/Filters/DelegateFilter.cs
    startLine: 21
  assemblies:
  - RestModels
  namespace: RestModels.Filters
  summary: "\nA dataset filter that uses a delegate to filter\n"
  example: []
  syntax:
    content: 'public class DelegateFilter<TModel, TUser> : IFilter<TModel, TUser> where TModel : class where TUser : class'
    typeParameters:
    - id: TModel
      description: The type of model being filtered
    - id: TUser
      description: The type of authenticated user
    content.vb: >-
      Public Class DelegateFilter(Of TModel As Class, TUser As Class)

          Implements IFilter(Of TModel, TUser)
  inheritance:
  - System.Object
  implements:
  - RestModels.Filters.IFilter{{TModel},{TUser}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: DelegateFilter(Of TModel, TUser)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: RestModels.Filters.DelegateFilter(Of TModel, TUser)
  name.vb: DelegateFilter(Of TModel, TUser)
- uid: RestModels.Filters.DelegateFilter`2.#ctor(System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1,System.Threading.Tasks.Task{System.Linq.IQueryable{`0}}})
  commentId: M:RestModels.Filters.DelegateFilter`2.#ctor(System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1,System.Threading.Tasks.Task{System.Linq.IQueryable{`0}}})
  id: '#ctor(System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1,System.Threading.Tasks.Task{System.Linq.IQueryable{`0}}})'
  parent: RestModels.Filters.DelegateFilter`2
  langs:
  - csharp
  - vb
  name: DelegateFilter(Func<HttpContext, IQueryable<TModel>, ParseResult<TModel>[], TUser, Task<IQueryable<TModel>>>)
  nameWithType: DelegateFilter<TModel, TUser>.DelegateFilter(Func<HttpContext, IQueryable<TModel>, ParseResult<TModel>[], TUser, Task<IQueryable<TModel>>>)
  fullName: RestModels.Filters.DelegateFilter<TModel, TUser>.DelegateFilter(System.Func<Microsoft.AspNetCore.Http.HttpContext, System.Linq.IQueryable<TModel>, RestModels.Parsers.ParseResult<TModel>[], TUser, System.Threading.Tasks.Task<System.Linq.IQueryable<TModel>>>)
  type: Constructor
  source:
    remote:
      path: RestModels/Filters/DelegateFilter.cs
      branch: master
      repo: git@github.com:jlynch630/RestModels.git
    id: .ctor
    path: ../../RestModels/Filters/DelegateFilter.cs
    startLine: 32
  assemblies:
  - RestModels
  namespace: RestModels.Filters
  summary: "\nInitializes a new instance of the <xref href=\"RestModels.Filters.DelegateFilter%602\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public DelegateFilter(Func<HttpContext, IQueryable<TModel>, ParseResult<TModel>[], TUser, Task<IQueryable<TModel>>> filterDelegate)
    parameters:
    - id: filterDelegate
      type: System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{{TModel}},RestModels.Parsers.ParseResult{{TModel}}[],{TUser},System.Threading.Tasks.Task{System.Linq.IQueryable{{TModel}}}}
      description: The delegate to use to filter the dataset
    content.vb: Public Sub New(filterDelegate As Func(Of HttpContext, IQueryable(Of TModel), ParseResult(Of TModel)(), TUser, Task(Of IQueryable(Of TModel))))
  overload: RestModels.Filters.DelegateFilter`2.#ctor*
  nameWithType.vb: DelegateFilter(Of TModel, TUser).DelegateFilter(Func(Of HttpContext, IQueryable(Of TModel), ParseResult(Of TModel)(), TUser, Task(Of IQueryable(Of TModel))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: RestModels.Filters.DelegateFilter(Of TModel, TUser).DelegateFilter(System.Func(Of Microsoft.AspNetCore.Http.HttpContext, System.Linq.IQueryable(Of TModel), RestModels.Parsers.ParseResult(Of TModel)(), TUser, System.Threading.Tasks.Task(Of System.Linq.IQueryable(Of TModel))))
  name.vb: DelegateFilter(Func(Of HttpContext, IQueryable(Of TModel), ParseResult(Of TModel)(), TUser, Task(Of IQueryable(Of TModel))))
- uid: RestModels.Filters.DelegateFilter`2.FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1)
  commentId: M:RestModels.Filters.DelegateFilter`2.FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1)
  id: FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1)
  parent: RestModels.Filters.DelegateFilter`2
  langs:
  - csharp
  - vb
  name: FilterDataAsync(HttpContext, IQueryable<TModel>, ParseResult<TModel>[], TUser)
  nameWithType: DelegateFilter<TModel, TUser>.FilterDataAsync(HttpContext, IQueryable<TModel>, ParseResult<TModel>[], TUser)
  fullName: RestModels.Filters.DelegateFilter<TModel, TUser>.FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext, System.Linq.IQueryable<TModel>, RestModels.Parsers.ParseResult<TModel>[], TUser)
  type: Method
  source:
    remote:
      path: RestModels/Filters/DelegateFilter.cs
      branch: master
      repo: git@github.com:jlynch630/RestModels.git
    id: FilterDataAsync
    path: ../../RestModels/Filters/DelegateFilter.cs
    startLine: 44
  assemblies:
  - RestModels
  namespace: RestModels.Filters
  summary: "\nFilters the model dataset by some condition\n"
  example: []
  syntax:
    content: public Task<IQueryable<TModel>> FilterDataAsync(HttpContext context, IQueryable<TModel> dataset, ParseResult<TModel>[] parsed, TUser user)
    parameters:
    - id: context
      type: Microsoft.AspNetCore.Http.HttpContext
      description: The current request context
    - id: dataset
      type: System.Linq.IQueryable{{TModel}}
      description: The current dataset to be filtered
    - id: parsed
      type: RestModels.Parsers.ParseResult{{TModel}}[]
      description: The parsed request body, if any
    - id: user
      type: '{TUser}'
      description: The current user context, if any
    return:
      type: System.Threading.Tasks.Task{System.Linq.IQueryable{{TModel}}}
      description: The filtered dataset
    content.vb: Public Function FilterDataAsync(context As HttpContext, dataset As IQueryable(Of TModel), parsed As ParseResult(Of TModel)(), user As TUser) As Task(Of IQueryable(Of TModel))
  overload: RestModels.Filters.DelegateFilter`2.FilterDataAsync*
  implements:
  - RestModels.Filters.IFilter{{TModel},{TUser}}.FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{{TModel}},RestModels.Parsers.ParseResult{{TModel}}[],{TUser})
  nameWithType.vb: DelegateFilter(Of TModel, TUser).FilterDataAsync(HttpContext, IQueryable(Of TModel), ParseResult(Of TModel)(), TUser)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: RestModels.Filters.DelegateFilter(Of TModel, TUser).FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext, System.Linq.IQueryable(Of TModel), RestModels.Parsers.ParseResult(Of TModel)(), TUser)
  name.vb: FilterDataAsync(HttpContext, IQueryable(Of TModel), ParseResult(Of TModel)(), TUser)
references:
- uid: RestModels.Filters
  commentId: N:RestModels.Filters
  name: RestModels.Filters
  nameWithType: RestModels.Filters
  fullName: RestModels.Filters
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: RestModels.Filters.IFilter{{TModel},{TUser}}
  commentId: T:RestModels.Filters.IFilter{`0,`1}
  parent: RestModels.Filters
  definition: RestModels.Filters.IFilter`2
  name: IFilter<TModel, TUser>
  nameWithType: IFilter<TModel, TUser>
  fullName: RestModels.Filters.IFilter<TModel, TUser>
  nameWithType.vb: IFilter(Of TModel, TUser)
  fullName.vb: RestModels.Filters.IFilter(Of TModel, TUser)
  name.vb: IFilter(Of TModel, TUser)
  spec.csharp:
  - uid: RestModels.Filters.IFilter`2
    name: IFilter
    nameWithType: IFilter
    fullName: RestModels.Filters.IFilter
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: RestModels.Filters.IFilter`2
    name: IFilter
    nameWithType: IFilter
    fullName: RestModels.Filters.IFilter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: RestModels.Filters.IFilter`2
  commentId: T:RestModels.Filters.IFilter`2
  name: IFilter<TModel, TUser>
  nameWithType: IFilter<TModel, TUser>
  fullName: RestModels.Filters.IFilter<TModel, TUser>
  nameWithType.vb: IFilter(Of TModel, TUser)
  fullName.vb: RestModels.Filters.IFilter(Of TModel, TUser)
  name.vb: IFilter(Of TModel, TUser)
  spec.csharp:
  - uid: RestModels.Filters.IFilter`2
    name: IFilter
    nameWithType: IFilter
    fullName: RestModels.Filters.IFilter
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: RestModels.Filters.IFilter`2
    name: IFilter
    nameWithType: IFilter
    fullName: RestModels.Filters.IFilter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: RestModels.Filters.DelegateFilter`2
  commentId: T:RestModels.Filters.DelegateFilter`2
  name: DelegateFilter<TModel, TUser>
  nameWithType: DelegateFilter<TModel, TUser>
  fullName: RestModels.Filters.DelegateFilter<TModel, TUser>
  nameWithType.vb: DelegateFilter(Of TModel, TUser)
  fullName.vb: RestModels.Filters.DelegateFilter(Of TModel, TUser)
  name.vb: DelegateFilter(Of TModel, TUser)
  spec.csharp:
  - uid: RestModels.Filters.DelegateFilter`2
    name: DelegateFilter
    nameWithType: DelegateFilter
    fullName: RestModels.Filters.DelegateFilter
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: RestModels.Filters.DelegateFilter`2
    name: DelegateFilter
    nameWithType: DelegateFilter
    fullName: RestModels.Filters.DelegateFilter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: RestModels.Filters.DelegateFilter`2.#ctor*
  commentId: Overload:RestModels.Filters.DelegateFilter`2.#ctor
  name: DelegateFilter
  nameWithType: DelegateFilter<TModel, TUser>.DelegateFilter
  fullName: RestModels.Filters.DelegateFilter<TModel, TUser>.DelegateFilter
  nameWithType.vb: DelegateFilter(Of TModel, TUser).DelegateFilter
  fullName.vb: RestModels.Filters.DelegateFilter(Of TModel, TUser).DelegateFilter
- uid: System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{{TModel}},RestModels.Parsers.ParseResult{{TModel}}[],{TUser},System.Threading.Tasks.Task{System.Linq.IQueryable{{TModel}}}}
  commentId: T:System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1,System.Threading.Tasks.Task{System.Linq.IQueryable{`0}}}
  parent: System
  definition: System.Func`5
  name: Func<HttpContext, IQueryable<TModel>, ParseResult<TModel>[], TUser, Task<IQueryable<TModel>>>
  nameWithType: Func<HttpContext, IQueryable<TModel>, ParseResult<TModel>[], TUser, Task<IQueryable<TModel>>>
  fullName: System.Func<Microsoft.AspNetCore.Http.HttpContext, System.Linq.IQueryable<TModel>, RestModels.Parsers.ParseResult<TModel>[], TUser, System.Threading.Tasks.Task<System.Linq.IQueryable<TModel>>>
  nameWithType.vb: Func(Of HttpContext, IQueryable(Of TModel), ParseResult(Of TModel)(), TUser, Task(Of IQueryable(Of TModel)))
  fullName.vb: System.Func(Of Microsoft.AspNetCore.Http.HttpContext, System.Linq.IQueryable(Of TModel), RestModels.Parsers.ParseResult(Of TModel)(), TUser, System.Threading.Tasks.Task(Of System.Linq.IQueryable(Of TModel)))
  name.vb: Func(Of HttpContext, IQueryable(Of TModel), ParseResult(Of TModel)(), TUser, Task(Of IQueryable(Of TModel)))
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Http.HttpContext
    name: HttpContext
    nameWithType: HttpContext
    fullName: Microsoft.AspNetCore.Http.HttpContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RestModels.Parsers.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: RestModels.Parsers.ParseResult
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Http.HttpContext
    name: HttpContext
    nameWithType: HttpContext
    fullName: Microsoft.AspNetCore.Http.HttpContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RestModels.Parsers.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: RestModels.Parsers.ParseResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`5
  commentId: T:System.Func`5
  isExternal: true
  name: Func<T1, T2, T3, T4, TResult>
  nameWithType: Func<T1, T2, T3, T4, TResult>
  fullName: System.Func<T1, T2, T3, T4, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, TResult)
  name.vb: Func(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: RestModels.Filters.DelegateFilter`2.FilterDataAsync*
  commentId: Overload:RestModels.Filters.DelegateFilter`2.FilterDataAsync
  name: FilterDataAsync
  nameWithType: DelegateFilter<TModel, TUser>.FilterDataAsync
  fullName: RestModels.Filters.DelegateFilter<TModel, TUser>.FilterDataAsync
  nameWithType.vb: DelegateFilter(Of TModel, TUser).FilterDataAsync
  fullName.vb: RestModels.Filters.DelegateFilter(Of TModel, TUser).FilterDataAsync
- uid: RestModels.Filters.IFilter{{TModel},{TUser}}.FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{{TModel}},RestModels.Parsers.ParseResult{{TModel}}[],{TUser})
  commentId: M:RestModels.Filters.IFilter{`0,`1}.FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1)
  parent: RestModels.Filters.IFilter{{TModel},{TUser}}
  definition: RestModels.Filters.IFilter`2.FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1)
  name: FilterDataAsync(HttpContext, IQueryable<TModel>, ParseResult<TModel>[], TUser)
  nameWithType: IFilter<TModel, TUser>.FilterDataAsync(HttpContext, IQueryable<TModel>, ParseResult<TModel>[], TUser)
  fullName: RestModels.Filters.IFilter<TModel, TUser>.FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext, System.Linq.IQueryable<TModel>, RestModels.Parsers.ParseResult<TModel>[], TUser)
  nameWithType.vb: IFilter(Of TModel, TUser).FilterDataAsync(HttpContext, IQueryable(Of TModel), ParseResult(Of TModel)(), TUser)
  fullName.vb: RestModels.Filters.IFilter(Of TModel, TUser).FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext, System.Linq.IQueryable(Of TModel), RestModels.Parsers.ParseResult(Of TModel)(), TUser)
  name.vb: FilterDataAsync(HttpContext, IQueryable(Of TModel), ParseResult(Of TModel)(), TUser)
  spec.csharp:
  - uid: RestModels.Filters.IFilter`2.FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1)
    name: FilterDataAsync
    nameWithType: IFilter<TModel, TUser>.FilterDataAsync
    fullName: RestModels.Filters.IFilter<TModel, TUser>.FilterDataAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Http.HttpContext
    name: HttpContext
    nameWithType: HttpContext
    fullName: Microsoft.AspNetCore.Http.HttpContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RestModels.Parsers.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: RestModels.Parsers.ParseResult
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RestModels.Filters.IFilter`2.FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1)
    name: FilterDataAsync
    nameWithType: IFilter(Of TModel, TUser).FilterDataAsync
    fullName: RestModels.Filters.IFilter(Of TModel, TUser).FilterDataAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Http.HttpContext
    name: HttpContext
    nameWithType: HttpContext
    fullName: Microsoft.AspNetCore.Http.HttpContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RestModels.Parsers.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: RestModels.Parsers.ParseResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Http.HttpContext
  commentId: T:Microsoft.AspNetCore.Http.HttpContext
  parent: Microsoft.AspNetCore.Http
  isExternal: true
  name: HttpContext
  nameWithType: HttpContext
  fullName: Microsoft.AspNetCore.Http.HttpContext
- uid: System.Linq.IQueryable{{TModel}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TModel>
  nameWithType: IQueryable<TModel>
  fullName: System.Linq.IQueryable<TModel>
  nameWithType.vb: IQueryable(Of TModel)
  fullName.vb: System.Linq.IQueryable(Of TModel)
  name.vb: IQueryable(Of TModel)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
- uid: RestModels.Parsers.ParseResult{{TModel}}[]
  isExternal: true
  name: ParseResult<TModel>[]
  nameWithType: ParseResult<TModel>[]
  fullName: RestModels.Parsers.ParseResult<TModel>[]
  nameWithType.vb: ParseResult(Of TModel)()
  fullName.vb: RestModels.Parsers.ParseResult(Of TModel)()
  name.vb: ParseResult(Of TModel)()
  spec.csharp:
  - uid: RestModels.Parsers.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: RestModels.Parsers.ParseResult
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: RestModels.Parsers.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: RestModels.Parsers.ParseResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: '{TUser}'
  commentId: '!:TUser'
  definition: TUser
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading.Tasks.Task{System.Linq.IQueryable{{TModel}}}
  commentId: T:System.Threading.Tasks.Task{System.Linq.IQueryable{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IQueryable<TModel>>
  nameWithType: Task<IQueryable<TModel>>
  fullName: System.Threading.Tasks.Task<System.Linq.IQueryable<TModel>>
  nameWithType.vb: Task(Of IQueryable(Of TModel))
  fullName.vb: System.Threading.Tasks.Task(Of System.Linq.IQueryable(Of TModel))
  name.vb: Task(Of IQueryable(Of TModel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: RestModels.Filters.IFilter`2.FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1)
  commentId: M:RestModels.Filters.IFilter`2.FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1)
  isExternal: true
  name: FilterDataAsync(HttpContext, IQueryable<TModel>, ParseResult<TModel>[], TUser)
  nameWithType: IFilter<TModel, TUser>.FilterDataAsync(HttpContext, IQueryable<TModel>, ParseResult<TModel>[], TUser)
  fullName: RestModels.Filters.IFilter<TModel, TUser>.FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext, System.Linq.IQueryable<TModel>, RestModels.Parsers.ParseResult<TModel>[], TUser)
  nameWithType.vb: IFilter(Of TModel, TUser).FilterDataAsync(HttpContext, IQueryable(Of TModel), ParseResult(Of TModel)(), TUser)
  fullName.vb: RestModels.Filters.IFilter(Of TModel, TUser).FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext, System.Linq.IQueryable(Of TModel), RestModels.Parsers.ParseResult(Of TModel)(), TUser)
  name.vb: FilterDataAsync(HttpContext, IQueryable(Of TModel), ParseResult(Of TModel)(), TUser)
  spec.csharp:
  - uid: RestModels.Filters.IFilter`2.FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1)
    name: FilterDataAsync
    nameWithType: IFilter<TModel, TUser>.FilterDataAsync
    fullName: RestModels.Filters.IFilter<TModel, TUser>.FilterDataAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Http.HttpContext
    name: HttpContext
    nameWithType: HttpContext
    fullName: Microsoft.AspNetCore.Http.HttpContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RestModels.Parsers.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: RestModels.Parsers.ParseResult
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: RestModels.Filters.IFilter`2.FilterDataAsync(Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1)
    name: FilterDataAsync
    nameWithType: IFilter(Of TModel, TUser).FilterDataAsync
    fullName: RestModels.Filters.IFilter(Of TModel, TUser).FilterDataAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Http.HttpContext
    name: HttpContext
    nameWithType: HttpContext
    fullName: Microsoft.AspNetCore.Http.HttpContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: RestModels.Parsers.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: RestModels.Parsers.ParseResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Http
  commentId: N:Microsoft.AspNetCore.Http
  isExternal: true
  name: Microsoft.AspNetCore.Http
  nameWithType: Microsoft.AspNetCore.Http
  fullName: Microsoft.AspNetCore.Http
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: TUser
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
