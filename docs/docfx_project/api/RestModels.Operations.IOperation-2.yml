### YamlMime:ManagedReference
items:
- uid: RestModels.Operations.IOperation`2
  commentId: T:RestModels.Operations.IOperation`2
  id: IOperation`2
  parent: RestModels.Operations
  children:
  - RestModels.Operations.IOperation`2.OperateAsync(Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1)
  langs:
  - csharp
  - vb
  name: IOperation<TModel, TUser>
  nameWithType: IOperation<TModel, TUser>
  fullName: RestModels.Operations.IOperation<TModel, TUser>
  type: Interface
  source:
    remote:
      path: RestModels/Operations/IOperation.cs
      branch: master
      repo: git@github.com:jlynch630/RestModels.git
    id: IOperation
    path: ../../RestModels/Operations/IOperation.cs
    startLine: 21
  assemblies:
  - RestModels
  namespace: RestModels.Operations
  summary: "\nOperation on model datasets, like create, update, or delete.\n"
  example: []
  syntax:
    content: >-
      public interface IOperation<TModel, in TUser>

          where TModel : class where TUser : class
    typeParameters:
    - id: TModel
      description: The type of model being operated on
    - id: TUser
      description: The type of authenticated user context
    content.vb: Public Interface IOperation(Of TModel As Class, In TUser As Class)
  nameWithType.vb: IOperation(Of TModel, TUser)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: RestModels.Operations.IOperation(Of TModel, TUser)
  name.vb: IOperation(Of TModel, TUser)
- uid: RestModels.Operations.IOperation`2.OperateAsync(Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1)
  commentId: M:RestModels.Operations.IOperation`2.OperateAsync(Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1)
  id: OperateAsync(Microsoft.AspNetCore.Http.HttpContext,System.Linq.IQueryable{`0},RestModels.Parsers.ParseResult{`0}[],`1)
  parent: RestModels.Operations.IOperation`2
  langs:
  - csharp
  - vb
  name: OperateAsync(HttpContext, IQueryable<TModel>, ParseResult<TModel>[], TUser)
  nameWithType: IOperation<TModel, TUser>.OperateAsync(HttpContext, IQueryable<TModel>, ParseResult<TModel>[], TUser)
  fullName: RestModels.Operations.IOperation<TModel, TUser>.OperateAsync(Microsoft.AspNetCore.Http.HttpContext, System.Linq.IQueryable<TModel>, RestModels.Parsers.ParseResult<TModel>[], TUser)
  type: Method
  source:
    remote:
      path: RestModels/Operations/IOperation.cs
      branch: master
      repo: git@github.com:jlynch630/RestModels.git
    id: OperateAsync
    path: ../../RestModels/Operations/IOperation.cs
    startLine: 31
  assemblies:
  - RestModels
  namespace: RestModels.Operations
  summary: "\nPerforms some action on a model dataset and returns the models that were affected\n"
  example: []
  syntax:
    content: Task<IEnumerable<TModel>> OperateAsync(HttpContext context, IQueryable<TModel> dataset, ParseResult<TModel>[] parsed, TUser user)
    parameters:
    - id: context
      type: Microsoft.AspNetCore.Http.HttpContext
      description: The current request context
    - id: dataset
      type: System.Linq.IQueryable{{TModel}}
      description: The filtered dataset to operate on
    - id: parsed
      type: RestModels.Parsers.ParseResult{{TModel}}[]
      description: The parsed request body, if any
    - id: user
      type: '{TUser}'
      description: The current user context, if any
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{TModel}}}
      description: The affected models
    content.vb: Function OperateAsync(context As HttpContext, dataset As IQueryable(Of TModel), parsed As ParseResult(Of TModel)(), user As TUser) As Task(Of IEnumerable(Of TModel))
  overload: RestModels.Operations.IOperation`2.OperateAsync*
  nameWithType.vb: IOperation(Of TModel, TUser).OperateAsync(HttpContext, IQueryable(Of TModel), ParseResult(Of TModel)(), TUser)
  fullName.vb: RestModels.Operations.IOperation(Of TModel, TUser).OperateAsync(Microsoft.AspNetCore.Http.HttpContext, System.Linq.IQueryable(Of TModel), RestModels.Parsers.ParseResult(Of TModel)(), TUser)
  name.vb: OperateAsync(HttpContext, IQueryable(Of TModel), ParseResult(Of TModel)(), TUser)
references:
- uid: RestModels.Operations
  commentId: N:RestModels.Operations
  name: RestModels.Operations
  nameWithType: RestModels.Operations
  fullName: RestModels.Operations
- uid: RestModels.Operations.IOperation`2.OperateAsync*
  commentId: Overload:RestModels.Operations.IOperation`2.OperateAsync
  name: OperateAsync
  nameWithType: IOperation<TModel, TUser>.OperateAsync
  fullName: RestModels.Operations.IOperation<TModel, TUser>.OperateAsync
  nameWithType.vb: IOperation(Of TModel, TUser).OperateAsync
  fullName.vb: RestModels.Operations.IOperation(Of TModel, TUser).OperateAsync
- uid: Microsoft.AspNetCore.Http.HttpContext
  commentId: T:Microsoft.AspNetCore.Http.HttpContext
  parent: Microsoft.AspNetCore.Http
  isExternal: true
  name: HttpContext
  nameWithType: HttpContext
  fullName: Microsoft.AspNetCore.Http.HttpContext
- uid: System.Linq.IQueryable{{TModel}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TModel>
  nameWithType: IQueryable<TModel>
  fullName: System.Linq.IQueryable<TModel>
  nameWithType.vb: IQueryable(Of TModel)
  fullName.vb: System.Linq.IQueryable(Of TModel)
  name.vb: IQueryable(Of TModel)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
- uid: RestModels.Parsers.ParseResult{{TModel}}[]
  isExternal: true
  name: ParseResult<TModel>[]
  nameWithType: ParseResult<TModel>[]
  fullName: RestModels.Parsers.ParseResult<TModel>[]
  nameWithType.vb: ParseResult(Of TModel)()
  fullName.vb: RestModels.Parsers.ParseResult(Of TModel)()
  name.vb: ParseResult(Of TModel)()
  spec.csharp:
  - uid: RestModels.Parsers.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: RestModels.Parsers.ParseResult
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: RestModels.Parsers.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: RestModels.Parsers.ParseResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: '{TUser}'
  commentId: '!:TUser'
  definition: TUser
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{TModel}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<TModel>>
  nameWithType: Task<IEnumerable<TModel>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<TModel>>
  nameWithType.vb: Task(Of IEnumerable(Of TModel))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of TModel))
  name.vb: Task(Of IEnumerable(Of TModel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Http
  commentId: N:Microsoft.AspNetCore.Http
  isExternal: true
  name: Microsoft.AspNetCore.Http
  nameWithType: Microsoft.AspNetCore.Http
  fullName: Microsoft.AspNetCore.Http
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: TUser
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
