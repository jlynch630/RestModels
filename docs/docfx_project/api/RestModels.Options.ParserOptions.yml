### YamlMime:ManagedReference
items:
- uid: RestModels.Options.ParserOptions
  commentId: T:RestModels.Options.ParserOptions
  id: ParserOptions
  parent: RestModels.Options
  children:
  - RestModels.Options.ParserOptions.Copy
  - RestModels.Options.ParserOptions.DefaultPropertyValues
  - RestModels.Options.ParserOptions.IgnoredParseProperties
  - RestModels.Options.ParserOptions.ParseArrays
  - RestModels.Options.ParserOptions.RequiredParseProperties
  langs:
  - csharp
  - vb
  name: ParserOptions
  nameWithType: ParserOptions
  fullName: RestModels.Options.ParserOptions
  type: Class
  source:
    remote:
      path: RestModels/Options/ParserOptions.cs
      branch: master
      repo: git@github.com:jlynch630/RestModels.git
    id: ParserOptions
    path: ../../RestModels/Options/ParserOptions.cs
    startLine: 15
  assemblies:
  - RestModels
  namespace: RestModels.Options
  summary: "\nOptions for parsing HTTP bodies\n"
  example: []
  syntax:
    content: public class ParserOptions
    content.vb: Public Class ParserOptions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: RestModels.Options.ParserOptions.DefaultPropertyValues
  commentId: P:RestModels.Options.ParserOptions.DefaultPropertyValues
  id: DefaultPropertyValues
  parent: RestModels.Options.ParserOptions
  langs:
  - csharp
  - vb
  name: DefaultPropertyValues
  nameWithType: ParserOptions.DefaultPropertyValues
  fullName: RestModels.Options.ParserOptions.DefaultPropertyValues
  type: Property
  source:
    remote:
      path: RestModels/Options/ParserOptions.cs
      branch: master
      repo: git@github.com:jlynch630/RestModels.git
    id: DefaultPropertyValues
    path: ../../RestModels/Options/ParserOptions.cs
    startLine: 19
  assemblies:
  - RestModels
  namespace: RestModels.Options
  summary: "\nGets or sets a list of default values for parsed properties\n"
  example: []
  syntax:
    content: public Dictionary<PropertyInfo, Func<object>> DefaultPropertyValues { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.Reflection.PropertyInfo,System.Func{System.Object}}
    content.vb: Public Property DefaultPropertyValues As Dictionary(Of PropertyInfo, Func(Of Object))
  overload: RestModels.Options.ParserOptions.DefaultPropertyValues*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: RestModels.Options.ParserOptions.IgnoredParseProperties
  commentId: P:RestModels.Options.ParserOptions.IgnoredParseProperties
  id: IgnoredParseProperties
  parent: RestModels.Options.ParserOptions
  langs:
  - csharp
  - vb
  name: IgnoredParseProperties
  nameWithType: ParserOptions.IgnoredParseProperties
  fullName: RestModels.Options.ParserOptions.IgnoredParseProperties
  type: Property
  source:
    remote:
      path: RestModels/Options/ParserOptions.cs
      branch: master
      repo: git@github.com:jlynch630/RestModels.git
    id: IgnoredParseProperties
    path: ../../RestModels/Options/ParserOptions.cs
    startLine: 25
  assemblies:
  - RestModels
  namespace: RestModels.Options
  summary: "\nGets or sets a list of properties that are ignored if their values are set\n"
  example: []
  syntax:
    content: public List<PropertyInfo> IgnoredParseProperties { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Reflection.PropertyInfo}
    content.vb: Public Property IgnoredParseProperties As List(Of PropertyInfo)
  overload: RestModels.Options.ParserOptions.IgnoredParseProperties*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: RestModels.Options.ParserOptions.RequiredParseProperties
  commentId: P:RestModels.Options.ParserOptions.RequiredParseProperties
  id: RequiredParseProperties
  parent: RestModels.Options.ParserOptions
  langs:
  - csharp
  - vb
  name: RequiredParseProperties
  nameWithType: ParserOptions.RequiredParseProperties
  fullName: RestModels.Options.ParserOptions.RequiredParseProperties
  type: Property
  source:
    remote:
      path: RestModels/Options/ParserOptions.cs
      branch: master
      repo: git@github.com:jlynch630/RestModels.git
    id: RequiredParseProperties
    path: ../../RestModels/Options/ParserOptions.cs
    startLine: 30
  assemblies:
  - RestModels
  namespace: RestModels.Options
  summary: "\nGets or sets a list of properties that are required when parsing\n"
  example: []
  syntax:
    content: public List<PropertyInfo> RequiredParseProperties { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Reflection.PropertyInfo}
    content.vb: Public Property RequiredParseProperties As List(Of PropertyInfo)
  overload: RestModels.Options.ParserOptions.RequiredParseProperties*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: RestModels.Options.ParserOptions.ParseArrays
  commentId: P:RestModels.Options.ParserOptions.ParseArrays
  id: ParseArrays
  parent: RestModels.Options.ParserOptions
  langs:
  - csharp
  - vb
  name: ParseArrays
  nameWithType: ParserOptions.ParseArrays
  fullName: RestModels.Options.ParserOptions.ParseArrays
  type: Property
  source:
    remote:
      path: RestModels/Options/ParserOptions.cs
      branch: master
      repo: git@github.com:jlynch630/RestModels.git
    id: ParseArrays
    path: ../../RestModels/Options/ParserOptions.cs
    startLine: 35
  assemblies:
  - RestModels
  namespace: RestModels.Options
  summary: "\nGets or sets a value indicating whether or not the parser should accept arrays\n"
  example: []
  syntax:
    content: public bool ParseArrays { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property ParseArrays As Boolean
  overload: RestModels.Options.ParserOptions.ParseArrays*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: RestModels.Options.ParserOptions.Copy
  commentId: M:RestModels.Options.ParserOptions.Copy
  id: Copy
  parent: RestModels.Options.ParserOptions
  langs:
  - csharp
  - vb
  name: Copy()
  nameWithType: ParserOptions.Copy()
  fullName: RestModels.Options.ParserOptions.Copy()
  type: Method
  source:
    remote:
      path: RestModels/Options/ParserOptions.cs
      branch: master
      repo: git@github.com:jlynch630/RestModels.git
    id: Copy
    path: ../../RestModels/Options/ParserOptions.cs
    startLine: 41
  assemblies:
  - RestModels
  namespace: RestModels.Options
  summary: "\nMakes a copy of these <xref href=\"RestModels.Options.ParserOptions\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public ParserOptions Copy()
    return:
      type: RestModels.Options.ParserOptions
      description: A copy of these <xref href="RestModels.Options.ParserOptions" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function Copy As ParserOptions
  overload: RestModels.Options.ParserOptions.Copy*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: RestModels.Options
  commentId: N:RestModels.Options
  name: RestModels.Options
  nameWithType: RestModels.Options
  fullName: RestModels.Options
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: RestModels.Options.ParserOptions.DefaultPropertyValues*
  commentId: Overload:RestModels.Options.ParserOptions.DefaultPropertyValues
  name: DefaultPropertyValues
  nameWithType: ParserOptions.DefaultPropertyValues
  fullName: RestModels.Options.ParserOptions.DefaultPropertyValues
- uid: System.Collections.Generic.Dictionary{System.Reflection.PropertyInfo,System.Func{System.Object}}
  commentId: T:System.Collections.Generic.Dictionary{System.Reflection.PropertyInfo,System.Func{System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<PropertyInfo, Func<Object>>
  nameWithType: Dictionary<PropertyInfo, Func<Object>>
  fullName: System.Collections.Generic.Dictionary<System.Reflection.PropertyInfo, System.Func<System.Object>>
  nameWithType.vb: Dictionary(Of PropertyInfo, Func(Of Object))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Reflection.PropertyInfo, System.Func(Of System.Object))
  name.vb: Dictionary(Of PropertyInfo, Func(Of Object))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: RestModels.Options.ParserOptions.IgnoredParseProperties*
  commentId: Overload:RestModels.Options.ParserOptions.IgnoredParseProperties
  name: IgnoredParseProperties
  nameWithType: ParserOptions.IgnoredParseProperties
  fullName: RestModels.Options.ParserOptions.IgnoredParseProperties
- uid: System.Collections.Generic.List{System.Reflection.PropertyInfo}
  commentId: T:System.Collections.Generic.List{System.Reflection.PropertyInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<PropertyInfo>
  nameWithType: List<PropertyInfo>
  fullName: System.Collections.Generic.List<System.Reflection.PropertyInfo>
  nameWithType.vb: List(Of PropertyInfo)
  fullName.vb: System.Collections.Generic.List(Of System.Reflection.PropertyInfo)
  name.vb: List(Of PropertyInfo)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: RestModels.Options.ParserOptions.RequiredParseProperties*
  commentId: Overload:RestModels.Options.ParserOptions.RequiredParseProperties
  name: RequiredParseProperties
  nameWithType: ParserOptions.RequiredParseProperties
  fullName: RestModels.Options.ParserOptions.RequiredParseProperties
- uid: RestModels.Options.ParserOptions.ParseArrays*
  commentId: Overload:RestModels.Options.ParserOptions.ParseArrays
  name: ParseArrays
  nameWithType: ParserOptions.ParseArrays
  fullName: RestModels.Options.ParserOptions.ParseArrays
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: RestModels.Options.ParserOptions
  commentId: T:RestModels.Options.ParserOptions
  parent: RestModels.Options
  name: ParserOptions
  nameWithType: ParserOptions
  fullName: RestModels.Options.ParserOptions
- uid: RestModels.Options.ParserOptions.Copy*
  commentId: Overload:RestModels.Options.ParserOptions.Copy
  name: Copy
  nameWithType: ParserOptions.Copy
  fullName: RestModels.Options.ParserOptions.Copy
